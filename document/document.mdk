Title         : README

author        : hjk


# OptiX封装
## Files
* Head Files
    * [optix_basic.h](#optix_basic.h)
    * [optix_basic_ds.h](#optix_basic_ds.h)
    * [optix_geometry.h](#optix_geometry.h)
    * [optix_geometry_instance.h](#optix_geometry_instance.h)
    * [optix_material_manager.h](#optix_material_manager.h)
    * [optix_shader.h](#optix_shader.h)
    * [optix_texture.h](#optix_texture.h)
    * [optix_scene_manager.h](#optix_scene_manager.h)
    * [optix_engine.h](#optix_engine.h)
* Source Files
    * optix_basic.cpp
    * optix_basic_ds.cpp
    * optix_geometry.cpp
    * optix_geometry_instance.cpp
    * optix_material_manager.cpp
    * optix_shader.cpp
    * optix_texture.cpp
    * optix_scene_manager.cpp
    * optix_engine.cpp

## Class
<a name="optix_basic.h"></a>
### optix_basic.h

[class OptixTexture2DResample;](#OptixTexture2DResample)

***用以渲染结果到纹理的一个历史遗留类，未改动，可以无视***

[class OptixBasic;](#OptixBasic)

***该类申请所需的optix基本资源，并在整个应用的生命周期中保持持有***



<a name="optix_basic_ds.h"></a>
### optix_basic_ds.h

[class GeometryBuffersInGPU;](#GeometryBuffersInGPU)

***在GPU中几何buffer的集合，析构时会自动释放资源***

[class GeometryBuffersInMemory;](#GeometryBuffersInMemory)

***在内存中几何buffer的集合，析构时会自动释放资源***

[class SamplePoints;](#SamplePoints)

***采样点的集合***


<a name="optix_geometry.h"></a>
### optix_geometry.h

[class OptixGeomerty;](#OptixGeomerty)

***对应OptiX中的geometry，在构造时会自动添加对三角网格几何结构的支持***


<a name="optix_geometry_instance.h"></a>
### optix_geometry_instance.h

[class OptixGeometryInstance;](#OptixGeometryInstance)

***对应OptiX中的geometryInstance，在构造时需要指定是否是光源，所有与实体相关的数据请通过 operator[] 访问器挂在该对象上***


<a name="optix_material_manager.h"></a>
### optix_material_manager.h

[class OptixMaterialManager;](#OptixMaterialManager)

***材质管理器，目前提供普通(Normal)以及光源(Light)两种材质，请通过扩展该类来增加更多材料(半透明等)***


<a name="optix_shader.h"></a>
### optix_shader.h

[class OptixProgram;](#OptixProgram)

***对应OptiX中的program，请勿直接使用该类，而是通过 OptixProgramManager 代为管理***

[class OptixProgramManager;](#OptixProgramManager)

***管理所有program对象，所有CU文件请放置于 cuFiles 文件夹下，并通过文件名来获取***


<a name="optix_texture.h"></a>
### optix_texture.h

***该文件基本未作改动，请参考原文档***


<a name="optix_scene_manager.h"></a>
### optix_scene_manager.h

[class OptixObject : public OptixGeometryInstance;](#OptixObject)

***该类为实际场景中的逻辑最小单位，拥有在OptiX模块中的唯一ID和从DX模块中传入的ID***

[class OptixChunk;](#OptixChunk)

***地块，请勿直接使用该类而总是通过 OptixSceneManager 来使用地块提供的服务***

[class OptixSceneManager;](#OptixSceneManager)

***OptiX模块的场景管理器，管理全部物体的加载与释放，请拓展该类来实现更多功能***


<a name="optix_engine.h"></a> 
### optix_engine.h

[class BakingTask;](#BakingTask)

***烘焙任务对象，通过调用 OptixEngine::StartBakingTask(BakingTask,RayNum)在GPU上开启一个烘焙任务***

[class OptixEngine;](#OptixEngine)

***OptiX模块与其他部分的界面***


## Functions
仅列出重要函数

<a name="GeometryBuffersInMemory"></a>
```cpp
GeometryBuffersInMemory::
    //获得该buffer集合中包含的三角形个数
    uint32_t GetTriangleNum() const;
    //获得该buffer集合中包含的顶点个数
    uint32_t GetVertexNum() const;
    
```

<a name="OptixGeomerty"></a>
```cpp
OptixGeomerty::
    //设置网格三角形个数
    uint32_t SetTriangleNum() const;
    
```

<a name="OptixGeometryInstance"></a>
```cpp
OptixGeometryInstance::
    //构造函数，须指定是否为光源，仅分配必须资源
    OptixGeometryInstance(bool isLight = false);
    //调用该函数来完成资源分配并初始化
    EngineFailReason Create(PointCommon *point_in, uint32_t *index_in, uint32_t vertex_num,	uint32_t index_num);
    //调用Upload来将内存中的Buffer送至GPU
    EngineFailReason Upload();
    //调用Unload来卸载GPU中buffer
    EngineFailReason Unload();
    //调用Release来释放除基本资源外的所有资源，注意基本资源将被持有直到析构。
    Release();
    //使用该访问器来绑定变量到物体实例
    optix::Handle<optix::VariableObj> operator[](const std::string& varname);
    //获取内存中的几何信息buffer备份
    GeometryBuffersInMemory& GetBuffersInMemory();
    //获取底层optix::GeometryInstance
    optix::GeometryInstance	GetGeometryInstance();
    //获取包围盒
    const optix::Aabb GetAABB() const;
    
```

<a name="OptixProgram"></a>
```cpp
OptixProgram::
    //获得optix::Program
    optix::Program GetData()
    
```

<a name="OptixProgramManager"></a>
```cpp
OptixProgramManager::
    //通过名字获得一个OptixProgram
    OptixProgram* GetProgramByName(std::string file_name, std::string program_name);
    
```

<a name="OptixMaterialManager"></a>
```cpp
OptixMaterialManager::
    //为GeomtryInstance添加普通材料
    void AddNormalMaterial(optix::GeometryInstance& geo);
    //为GeomtryInstance添加灯光材料
    void AddLightMaterial(optix::GeometryInstance& geo);
    
```

<a name="OptixChunk"></a>
```cpp
OptixChunk::
    //添加一个子物体
    void AddChild(OptixObject* object);
    //卸载所有GPU资源，但保留内存备份
    void Unload();
    //重新传送内存备份到GPU
    void Upload();
    //删除所有子物体资源，包括GPU部分和内存部分。
    void ReleaseChildren();
    
```

<a name="OptixSceneManager"></a>
```cpp
OptixSceneManager::
    //向某地块中添加物体
    void AddObjectToScene(OptixObject* object, uint32_t x = 0, uint32_t y = 0);
    //查找某物体
    OptixObject* FindObjectInScene(uint64_t id);
    //从场景中卸载某地块
    void UnloadChunk(uint32_t x = 0, uint32_t y = 0);
    //向场景中加载某地块
    void UploadChunk(uint32_t x = 0, uint32_t y = 0);
    //清除并释放所有地块的资源，包括其子物体以及其几何资源
    void RemoveAll();
    //获得场景包围盒
    optix::Aabb GetAABB();
    //获得光源列表
    const list<uint64_t> GetLightList();
    
```

<a name="BakingTask"></a>
```cpp
BakingTask::
    //创建一个烘焙任务
    BakingTask(OptixObject* object);
    //计算采样点云，由CPU完成
    EngineFailReason BuildBakingSamples(uint32_t tex_width, uint32_t tex_height, float sample_quality);
    //将点云Buffer送至GPU
    EngineFailReason Upload();
    //绑定当前任务的Buffer到OptixContext
    void BindBakingBufferToContext();
    //释放GPU的采样点云Buffer
    void Unload();
    //释放CPU和GPU的采样点云Buffer
    void Release();    
    
```

<a name="OptixEngine"></a>
```cpp
OptixEngine::
    //设置烘焙类型
    void SetBakingType(BakingType bake_operation_in);
    //渲染场景到贴图并返回
    ID3D11Texture2D* RenderToTexture(int width, int height);
    //从SceneDesign中读取并覆盖当前场景
    EngineFailReason LoadScene(manul::SceneDesign *scene_directx);
    //在GPU上开启一个烘焙任务
    void StartBakingTask(BakingTask* task, uint32_t ray_num);
    //获取所有待烘焙任务
    std::vector<BakingTask*> GetTasks();
    //获取所有贴图文件的名字
    std::vector<std::string> GetAllFileName();
    //清除所有额外资源，恢复原始状态
    void RemoveAll();    
    
```




# cuFiles

* bake_texture.cu
  
  ***烘焙贴图相关***

* constantbg.cu

  ***背景色，可拓展为天空盒***

* material_shader.cu

  ***包含所有material program***

* realtime_render.cu

  ***包含所有实时预览相机***
  
* triangle_mesh.cu

  ***三角形网格intersect program***

# RayTracing

根据物体体积和网格精细程度(面片数)调整贴图大小。在烘焙时，来自光源直射的辐射贡献最大，故先对光源进行有先验的采样，以提高质量。此外，按辐射度理论对周围空间进行蒙特卡洛重要性采样。在这一过程中同时计算来自环境光的辐射和来自物体的辐射。在采样来自物体的间接辐射时，按照射线落空的概率来估计物体间接辐射随空间分布的pdf，并进行重要性采样。此外，在计算物体间接辐强度时，由于其对最终结果的贡献小，所以减小采样数量。对于不同的物体，同一类型全部共用同一个geometry和material节点，而仅仅在geometry buffer和texture sampler中做出区别，提高了复用性和效率。采用NVIDIA的DeepLearningDenoiser极大程度上减少了结果噪点。

#  Extension

1.未能提供对于透明材料的支持。

2.平行光源只能有一个并作为主光源。

3.环境光无法选择来自天空盒。

4.物体diffuse color只来自按uv采样的主贴图，并且不支持顶点色。

5.按物体为单位的粗粒度的中间过程cache并不能明显提高效率，并且增大了显存开销，已经废弃。

6.UI部分与后端的交互写的比较随意

# UserInterface

![ui](./ui.png)

使用QT4.7.0生成